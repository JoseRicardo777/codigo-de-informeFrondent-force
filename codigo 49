// __tests__/stores/cart-store.test.ts
import { renderHook, act } from '@testing-library/react'
import { useCartStore } from '@/stores/cart-store'
import { Product } from '@/types/product'

const mockProduct: Product = {
  id: 1,
  name: 'AMD Ryzen 5 5600X',
  category: 'procesador',
  price: 1200,
  stock: 10,
  specifications: {},
  imageUrl: 'test.jpg'
}

describe('Cart Store', () => {
  beforeEach(() => {
    useCartStore.setState({ items: [], total: 0, itemCount: 0 })
  })

  it('should add item to cart', async () => {
    const { result } = renderHook(() => useCartStore())
    
    await act(async () => {
      await result.current.addItem(mockProduct, 1)
    })

    expect(result.current.items).toHaveLength(1)
    expect(result.current.items[0].product.id).toBe(1)
    expect(result.current.itemCount).toBe(1)
    expect(result.current.total).toBe(1200)
  })

  it('should update quantity when adding existing item', async () => {
    const { result } = renderHook(() => useCartStore())
    
    await act(async () => {
      await result.current.addItem(mockProduct, 1)
      await result.current.addItem(mockProduct, 2)
    })

    expect(result.current.items).toHaveLength(1)
    expect(result.current.items[0].quantity).toBe(3)
    expect(result.current.itemCount).toBe(3)
    expect(result.current.total).toBe(3600)
  })

  it('should remove item from cart', async () => {
    const { result } = renderHook(() => useCartStore())
    
    await act(async () => {
      await result.current.addItem(mockProduct, 1)
      await result.current.removeItem(mockProduct.id)
    })

    expect(result.current.items).toHaveLength(0)
    expect(result.current.itemCount).toBe(0)
    expect(result.current.total).toBe(0)
  })
})
