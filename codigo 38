// app/api/cart/add/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { z } from 'zod'

const AddToCartSchema = z.object({
  productId: z.number().min(1),
  quantity: z.number().min(1).max(10)
})

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // Verificar autenticación
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json(
        { error: 'No autenticado' },
        { status: 401 }
      )
    }
    
    // Validar datos de entrada
    const body = await request.json()
    const validationResult = AddToCartSchema.safeParse(body)
    
    if (!validationResult.success) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: validationResult.error.errors },
        { status: 400 }
      )
    }
    
    const { productId, quantity } = validationResult.data
    
    // Verificar que el producto existe y tiene stock
    const { data: product, error: productError } = await supabase
      .from('components')
      .select('stock, precio_bs')
      .eq('id_componente', productId)
      .single()
    
    if (productError || !product) {
      return NextResponse.json(
        { error: 'Producto no encontrado' },
        { status: 404 }
      )
    }
    
    if (product.stock < quantity) {
      return NextResponse.json(
        { error: 'Stock insuficiente' },
        { status: 400 }
      )
    }
    
    // Obtener o crear carrito del usuario
    let { data: cart, error: cartError } = await supabase
      .from('carritos')
      .select('id_carrito')
      .eq('id_usuario', user.id)
      .single()
    
    if (cartError && cartError.code !== 'PGRST116') { // PGRST116 = no rows
      throw cartError
    }
    
    if (!cart) {
      const { data: newCart, error: createError } = await supabase
        .from('carritos')
        .insert({ id_usuario: user.id })
        .select('id_carrito')
        .single()
      
      if (createError) throw createError
      cart = newCart
    }
    
    // Verificar si el producto ya está en el carrito
    const { data: existingItem, error: existingError } = await supabase
      .from('carrito_items')
      .select('id_item, cantidad')
      .eq('id_carrito', cart.id_carrito)
      .eq('id_componente', productId)
      .single()
    
    if (existingError && existingError.code !== 'PGRST116') {
      throw existingError
    }
    
    if (existingItem) {
      // Actualizar cantidad
      const newQuantity = existingItem.cantidad + quantity
      
      if (product.stock < newQuantity) {
        return NextResponse.json(
          { error: 'Stock insuficiente para la cantidad solicitada' },
          { status: 400 }
        )
      }
      
      const { error: updateError } = await supabase
        .from('carrito_items')
        .update({ 
          cantidad: newQuantity,
          precio_unitario: product.precio_bs
        })
        .eq('id_item', existingItem.id_item)
      
      if (updateError) throw updateError
    } else {
      // Insertar nuevo item
      const { error: insertError } = await supabase
        .from('carrito_items')
        .insert({
          id_carrito: cart.id_carrito,
          id_componente: productId,
          cantidad: quantity,
          precio_unitario: product.precio_bs
        })
      
      if (insertError) throw insertError
    }
    
    return NextResponse.json({ success: true })
    
  } catch (error) {
    console.error('Add to cart error:', error)
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    )
  }
}
