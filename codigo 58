// __tests__/security/sql-injection.test.ts
describe('SQL Injection Protection', () => {
  it('should sanitize user input in search', async () => {
    const maliciousInput = "'; DROP TABLE components; --"
    
    const { req } = createMocks({
      method: 'POST',
      body: {
        query: maliciousInput,
        filters: {}
      }
    })

    const response = await searchHandler(req)
    
    // La base de datos no debería ser afectada
    expect(response.status).not.toBe(500)
    
    // Verificar que la tabla todavía existe
    const supabase = await createClient()
    const { data, error } = await supabase
      .from('components')
      .select('count')
      .limit(1)
    
    expect(error).toBeNull()
    expect(data).toBeDefined()
  })

  it('should validate input types', async () => {
    const invalidInputs = [
      { productId: 'invalid', quantity: 1 },
      { productId: 1, quantity: 'invalid' },
      { productId: null, quantity: 1 },
      { productId: 1, quantity: -1 }
    ]

    for (const input of invalidInputs) {
      const { req } = createMocks({
        method: 'POST',
        body: input
      })

      const response = await addToCartHandler(req)
      expect(response.status).toBe(400)
    }
  })
})
