import { create } from 'zustand'
import { persist } from 'zustand/middleware'

interface CartItem {
  id: number
  product: Product
  quantity: number
  price: number
}

interface CartStore {
  items: CartItem[]
  total: number
  itemCount: number
  isloading: boolean
  
  // Actions
  addItem: (product: Product, quantity: number) => Promise<void>
  removeItem: (productId: number) => Promise<void>
  updateQuantity: (productId: number, quantity: number) => Promise<void>
  clearCart: () => void
  syncWithServer: () => Promise<void>
}

export const useCartStore = create<CartStore>()(
  persist(
    (set, get) => ({
      items: [],
      total: 0,
      itemCount: 0,
      isLoading: false,
      
      addItem: async (product, quantity) => {
        set({ isLoading: true })
        
        try {
          // Llamar a la API para agregar al carrito
          const response = await fetch('/api/cart/add', {
            method: 'POST',
            body: JSON.stringify({ productId: product.id, quantity })
          })
          
          if (!response.ok) throw new Error('Error al agregar al carrito')
          
          // Actualizar estado local
          const { items } = get()
          const existingItem = items.find(item => item.id === product.id)
          
          if (existingItem) {
            set({
              items: items.map(item =>
                item.id === product.id
                  ? { ...item, quantity: item.quantity + quantity }
                  : item
              )
            })
          } else {
            set({
              items: [...items, {
                id: product.id,
                product,
                quantity,
                price: product.price
              }]
            })
          }
          
          // Recalcular totales
          get().calculateTotals()
          
        } catch (error) {
          console.error('Error adding to cart:', error)
          throw error
        } finally {
          set({ isLoading: false })
        }
      },
      
      calculateTotals: () => {
        const { items } = get()
        const total = items.reduce((sum, item) => sum + (item.price * item.quantity), 0)
        const itemCount = items.reduce((sum, item) => sum + item.quantity, 0)
        
        set({ total, itemCount })
      },
      
      // ... otras actions
    }),
    {
      name: 'cart-storage',
      partialize: (state) => ({ 
        items: state.items,
        total: state.total,
        itemCount: state.itemCount 
      })
    }
  )
)
